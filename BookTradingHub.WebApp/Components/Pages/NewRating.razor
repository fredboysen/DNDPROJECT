@page "/newrating/{bookId:int}"
@page "/newrating"
@inject HttpClient Http

<PageTitle>New Rating</PageTitle>

<h3>Add New Rating</h3>

<EditForm Model="@rating" OnValidSubmit="@AddRating">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="bookName">Select Book</label>
        <select id="bookName" class="form-control" @bind="rating.book_Id">
            <option value="">-- Select a Book --</option>
            @if (Books != null)
            {
                @foreach (var book in Books)
                {
                    <option value="@book.book_Id" selected="@(book.book_Id == rating.book_Id ? true : false)">
                        @book.title
                    </option>
                }
            }
        </select>
    </div>

    <div class="form-group star-container">
        <label for="starRating">Rating</label>
        <div class="slider-wrapper">
            <input type="range" id="starRating" class="form-control" @bind="rating.stars" min="1" max="5" />
            <div class="slider-value-box">
                @rating.stars
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description-container" class="form-control" @bind="rating.review"></textarea>
    </div>

    <button class="btn btn-primary">Add</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="text-success">@Message</p>
}

@code {
    [Parameter] public int bookId { get; set; }  
    
    private List<Book> Books = new();
    private Rating rating = new();
    private string Message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
            Books = await Http.GetFromJsonAsync<List<Book>>("https://localhost:7167/api/books");

            rating.book_Id = bookId;  
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task AddRating()
    {
        Message = string.Empty;

        if (rating.book_Id == 0 || rating.stars < 1 || rating.stars > 5 || string.IsNullOrWhiteSpace(rating.review))
        {
            Message = "All fields are required, and rating must be between 1 and 5.";
            return;
        }

        var response = await Http.PostAsJsonAsync("https://localhost:7167/api/Rating/AddRating", rating);
        if (response.IsSuccessStatusCode)
        {
            Message = "Rating added successfully!";
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Message = $"Error: {error}";
        }
    }
}
