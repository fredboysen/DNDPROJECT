@page "/newrating"
@inject HttpClient Http
@rendermode InteractiveServer /* This is INSANELY important for the actual slider-value-box to update dynamically.. 6 hours down the drain :-) Why is this not a standard implementation?? */

<h3>Add New Rating</h3>

<EditForm Model="@ratingModel" OnValidSubmit="@AddRating">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="bookName">Select Book</label>
        <select id="bookName" class="form-control" @bind="ratingModel.BookId">
            <option value="">-- Select a Book --</option>
            @if (Books != null)
            {
                @foreach (var book in Books)
                {
                    <option value="@book.book_Id">@book.title</option>
                }
            }
        </select>
    </div>
    
    <div class="form-group star-container">
        <label for="starRating">Rating</label>
        <div class="slider-wrapper">
            <input type="range" id="starRating" class="form-control" @bind="ratingModel.StarRating" min="1" max="5" @oninput="UpdateValue" />
            <div class="slider-value-box">
                @ratingModel.StarRating
            </div>
        </div>
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description-container" class="form-control" @bind="ratingModel.Description"></textarea>
    </div>

    <button class="btn btn-primary">Add</button>
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="text-success">@Message</p>
}

@code {
    private List<Book> Books = new(); 
    private RatingModel ratingModel = new(); 
    private string Message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Books = await Http.GetFromJsonAsync<List<Book>>("https://localhost:7167/api/books");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching books: {ex.Message}");
        }
    }

    private async Task AddRating()
    {
        Message = "Rating added successfully!";
    }

    private void UpdateValue(ChangeEventArgs e)
    {
        ratingModel.StarRating = int.Parse(e.Value.ToString());
    }

    public class RatingModel
    {
        public int BookId { get; set; }  
        public int StarRating { get; set; } = 1; 
        public string Description { get; set; }  
    }

    private class Book
    {
        public int book_Id { get; set; }
        public string title { get; set; }
    }
}
