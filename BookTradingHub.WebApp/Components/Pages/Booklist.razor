@page "/booklist"
@inject IHttpClientFactory HttpClientFactory
@using BookTradingHub.WebAPI.Models

<h3>Books List</h3>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Genre</th>
                <th>Publisher</th>
                <th>Publish Date</th>
                <th>Condition</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.title</td> <!-- Corrected to use 'title' from Book.cs -->
                    <td>@book.author</td> <!-- Corrected to use 'author' from Book.cs -->
                    <td>@book.isbn</td> <!-- Corrected to use 'isbn' from Book.cs -->
                    <td>@book.genre</td> <!-- Corrected to use 'genre' from Book.cs -->
                    <td>@book.publisher</td> <!-- Corrected to use 'publisher' from Book.cs -->
                    <td>@book.publish_Date.ToShortDateString()</td> <!-- Corrected to use 'publish_date' from Book.cs -->
                    <td>@book.condition</td> <!-- Corrected to use 'condition' from Book.cs -->
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Book> books;

    protected override async Task OnInitializedAsync()
    {
        // Create an HttpClient instance using IHttpClientFactory
        var client = HttpClientFactory.CreateClient("WebAPI");

        // Get books from the API
        books = await client.GetFromJsonAsync<List<Book>>("api/books");
    }
}
