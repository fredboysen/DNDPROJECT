@page "/login"
@using BookTradingHub.WebApp.Services.Http
@using BookTradingHub.WebAPI.Controllers
@using BookTradingHub.WebAPI.Models
@inject HttpClient Http
@inject NavigationManager navMgr
@inject IAuthService authService
@inject NavigationManager Navigation

<link rel="stylesheet" href="Login.css">

<div class="container">
    <div class="row">
        <!-- Login Section -->
        <div class="col-md-6 card">
            <h3>Login</h3>
            <div class="field">
                <label>Username:</label>
                <input type="text" @bind="loginUsername" />
            </div>
            <div class="field">
                <label>Password:</label>
                <input type="password" @bind="loginPassword" />
            </div>
            @if (!string.IsNullOrEmpty(loginErrorLabel))
            {
                <div class="field">
                    <label style="color: red">
                        @loginErrorLabel
                    </label>
                </div>
            }
            <div class="field">
                <button class="loginbtn" @onclick="LoginAsync">Log in</button>
            </div>
        </div>

        <div class="col-md-6 card">
            <h3>Register</h3>
            <div class="field">
                <label>Username:</label>
                <input type="text" @bind="user.username" />
            </div>
            <div class="field">
                <label>Password:</label>
                <input type="password" @bind="user.password" />
            </div>
            <div class="field">
                <label>Email:</label>
                <input type="email" @bind="user.email" />
            </div>
           
 @if (!string.IsNullOrEmpty(registrationErrorMessage))
    {
        <div class="field">
            <label style="color: red">
                @registrationErrorMessage
            </label>
        </div>
    }

    @if (!string.IsNullOrEmpty(registrationSuccessMessage))
    {
        <div class="field">
            <label style="color: green">
                @registrationSuccessMessage
            </label>
        </div>
    }

            <div class="field">
                <button class="registerbtn" @onclick="HandleRegistration">Register</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string loginUsername = "";
    private string loginPassword = "";
    private string loginErrorLabel = "";
private string registrationErrorMessage = "";   
    private string registrationSuccessMessage = "";

    private async Task LoginAsync()
    {
        loginErrorLabel = "";
        try
        {
            await authService.LoginAsync(loginUsername, loginPassword);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Login failed: {e.Message}");
            loginErrorLabel = $"Error: {e.Message}";
        }
    }
private User user = new User();

    private async Task HandleRegistration()
    {
        registrationSuccessMessage = "";
        registrationErrorMessage = "";

         if (string.IsNullOrWhiteSpace(user.username) ||
            string.IsNullOrWhiteSpace(user.password) ||
            string.IsNullOrWhiteSpace(user.email))
        {
            registrationErrorMessage = "Please fill in all fields.";
            return;
        }
        var response = await Http.PostAsJsonAsync("/Auth/register", user);
        if (response.IsSuccessStatusCode)
        {
             registrationSuccessMessage = "Registration successful, please log in";
            Navigation.NavigateTo("/login");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
              registrationErrorMessage = $"Error: {error}";
            Console.WriteLine($"Error: {error}");
        }
    }

    public class User
    {
        public string username { get; set; } = "";
        public string password { get; set; } = "";
        public string email { get; set; } = "";
        public string role { get; set; } = "User";
    
    }
}