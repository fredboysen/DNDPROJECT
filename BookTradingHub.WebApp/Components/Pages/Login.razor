@page "/login"
@using BookTradingHub.WebApp.Services.Http
@using BookTradingHub.WebAPI.Controllers
@using BookTradingHub.WebAPI.Models
@inject IAuthService authService
@inject NavigationManager navMgr

<link rel="stylesheet" href="Login.css">

<div class="container">
    <div class="row">
        <!-- Login Section -->
        <div class="col-md-6 card">
            <h3>Login</h3>
            <div class="field">
                <label>Username:</label>
                <input type="text" @bind="loginUsername" />
            </div>
            <div class="field">
                <label>Password:</label>
                <input type="password" @bind="loginPassword" />
            </div>
            @if (!string.IsNullOrEmpty(loginErrorLabel))
            {
                <div class="field">
                    <label style="color: red">
                        @loginErrorLabel
                    </label>
                </div>
            }
            <div class="field">
                <button class="loginbtn" @onclick="LoginAsync">Log in</button>
            </div>
        </div>

        <!-- Registration Section -->
        <div class="col-md-6 card">
            <h3>Register</h3>
            <div class="field">
                <label>Username:</label>
                <input type="text" @bind="registerUsername" />
            </div>
            <div class="field">
                <label>Password:</label>
                <input type="password" @bind="registerPassword" />
            </div>
            <div class="field">
                <label>Email:</label>
                <input type="email" @bind="registerEmail" />
            </div>
            @if (!string.IsNullOrEmpty(registerErrorLabel))
            {
                <div class="field">
                    <label style="color: red">
                        @registerErrorLabel
                    </label>
                </div>
            }
            @if (!string.IsNullOrEmpty(successLabel))
            {
                <div class="field">
                    <label style="color: green">
                        @successLabel
                    </label>
                </div>
            }
            <div class="field">
                <button class="registerbtn" @onclick="RegisterAsync">Register</button>
            </div>
        </div>
    </div>
</div>

@code {
    // Login fields
    private string loginUsername = "";
    private string loginPassword = "";
    private string loginErrorLabel = "";

    // Registration fields
    private string registerUsername = "";
    private string registerPassword = "";
    private string registerEmail = "";
    private string registerErrorLabel = "";
    private string successLabel = "";

    private async Task LoginAsync()
    {
        loginErrorLabel = "";
        try
        {
            await authService.LoginAsync(loginUsername, loginPassword);
            navMgr.NavigateTo("/");
        }
        catch (Exception e)
        {
            Console.WriteLine($"Login failed: {e.Message}");
            loginErrorLabel = $"Error: {e.Message}";
        }
    }

    private async Task RegisterAsync()
    {
        registerErrorLabel = "";
        successLabel = "";

        if (string.IsNullOrEmpty(registerUsername) || string.IsNullOrEmpty(registerPassword) || string.IsNullOrEmpty(registerEmail))
        {
            registerErrorLabel = "All fields are required.";
            return;
        }

        try
        {
            var User = new User
            {
                username = registerUsername,
                password = registerPassword,
                email = registerEmail
            };

            await authService.RegisterAsync(User);
            successLabel = "Registration successful! You can now log in.";
            registerUsername = registerPassword = registerEmail = ""; // Clear fields
        }
        catch (Exception e)
        {
            Console.WriteLine($"Registration failed: {e.Message}");
            registerErrorLabel = $"Error: {e.Message}";
        }
    }
}
