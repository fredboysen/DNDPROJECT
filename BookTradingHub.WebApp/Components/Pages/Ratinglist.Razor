@page "/ratingslist"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>View ratings</PageTitle>

<h3>All Ratings</h3>

@if (ratings != null && ratings.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Book Title</th>
                <th>Rating</th>
                <th>Review</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rating in ratings)
            {
            <tr>
            <td class="rating-title">@rating.title</td>
            <td class="rating-stars">@rating.stars</td>
            <td class="rating-review">@rating.review</td>
            <td>
                <button class="btn btn-danger" @onclick="() => DeleteRating(rating.rating_id)">
                    Delete
                </button>
            </td>
        </tr>
    }
</tbody>
    </table>
}
else
{
    <p>No ratings available.</p>
}

@code {
    private List<Rating> ratings = new List<Rating>();
protected override async Task OnInitializedAsync()
{
    var user = await GetCurrentUserAsync();
    
    if (user == null)
    {
        Console.WriteLine("No user is logged in.");
        Navigation.NavigateTo("/");
        return;
    }

    Console.WriteLine($"User is authenticated: {user.Identity?.IsAuthenticated}");
    Console.WriteLine($"User roles: {string.Join(", ", user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value))}");

    if (!user.IsInRole("admin"))
    {
        Console.WriteLine("User is not an admin.");
        Navigation.NavigateTo("/");
        return;
    }

    Console.WriteLine("User is an admin. Loading ratings...");
    await GetRatings();
}

    private async Task GetRatings()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7167/api/Rating/GetRatings");
            if (response.IsSuccessStatusCode)
            {
                ratings = await response.Content.ReadFromJsonAsync<List<Rating>>();
            }
            else
            {
                Console.WriteLine($"Error fetching ratings: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching ratings: {ex.Message}");
        }
    }

    private async Task DeleteRating(int ratingId)
{
    try
    {
        var response = await Http.DeleteAsync($"https://localhost:7167/api/Rating/DeleteRating/{ratingId}");
        if (response.IsSuccessStatusCode)
        {
            ratings = ratings.Where(r => r.rating_id != ratingId).ToList();

            await GetRatings();
        }
        else
        {
            Console.WriteLine("Error deleting rating.");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error deleting rating: {ex.Message}");
    }
}

    private async Task<ClaimsPrincipal> GetCurrentUserAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        return authState.User;
    }
}
